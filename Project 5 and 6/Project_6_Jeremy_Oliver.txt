(define (etsp vertices)
  (second (getLeastScore(getScores vertices (genTours (getLength vertices)))))
)
(define (getLeastScore lst)
  (cond
    ((null? (rest lst))(first lst))
    ((> (first (first lst)) (first (second lst)))(getLeastScore (cons (second lst) (rest (rest lst)))))
    ((getLeastScore (cons (first lst) (rest (rest lst)))))
  )
)
(define (getScores vertices tourslist)
  (if (null? tourslist)
      null
      (cons (cons (score vertices (first tourslist)) (cons (first tourslist) null)) (getScores vertices (rest tourslist)))
  )
)
(define (getLength lst)
  (if (null? lst)
      0
      (+ 1 (getLength (rest lst)))
  )
)
(define (score vertices stops)
  (scores vertices (rest stops) (first stops))
)
(define (scores vertices stops start)
  (if (null? stops)
      (findLength (get start vertices) (get 1 vertices))
      (+ (scores vertices (rest stops) (first stops))(findLength (get start vertices) (get (first stops) vertices)))
  )
)
(define (findLength a b)
  (sqrt (+ (sq (- (first b) (first a)))(sq (- (second b)(second a)))))
)
(define (sqrt num)
  (cleanup (findsqrt (/ num 2) num))
)
(define (cleanup num)
  (if (> (- num (truncate num)) 0.0001)
      (* num 1.00)
      (truncate num)
  )
)
(define (findsqrt x num)
  (if (and (> (sq x) (- num 0.0001)) (<= (sq x) (+ num 0.0001)))
      x
      (findsqrt (/ (+ x (/ num x)) 2) num)
  )
)
(define (sq num)
  (* num num)
)
(define (get p x)
  (cond
    ( (null? x) null )
    ( (= p 1) (first x) )
    ( (get (- p 1) (cdr x)) )
  )
)
(define (genTours num)
  (addOne (permutations (genList num)))
)
(define (addOne lst)
  (if (null? lst)
      null
      (cons (cons 1 (first lst)) (addOne (rest lst)))
   )
)
(define (genList num)
  (if (= num 1)
      null
      (app num (genList (- num 1)))
  )
)
(define (app a x)
  (if (null? x)
      (cons a null)
      (cons (first x) (app a (cdr x)))
  )
)